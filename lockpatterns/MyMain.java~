package lockpatterns;

import java.util.*;

import soot.*;
import soot.util.Chain;
import soot.jimple.*;
import soot.jimple.toolkits.pointer.*;
import soot.jimple.toolkits.thread.ThreadLocalObjectsAnalysis;
import soot.jimple.toolkits.thread.synchronization.*;
import soot.jimple.toolkits.thread.mhp.MhpTester;
import soot.jimple.toolkits.thread.mhp.SynchObliviousMhpAnalysis;
import soot.jimple.toolkits.callgraph.*;
import soot.jimple.toolkits.infoflow.*;
import soot.jimple.spark.pag.*;
import soot.jimple.spark.sets.*;
import soot.toolkits.scalar.*;
import soot.toolkits.graph.*;


public class MyMain
{
    public static boolean optionPrintDebug = false;
    public static boolean optionOpenNesting = false;
    public static void main(String[] args) {
	Transform t = new Transform("wjtp.criticalsections", 
				    new BodyTransformer() {
					protected void internalTransform(Body body, String phase, Map options) {
					    SootMethod m = body.getMethod();
					    SootClass c = m.getDeclaringClass();
					    System.out.println("Search for critical sections in " + c.getName() + "." + m.getName());
					    UnitGraph eug = new BriefUnitGraph(body);
					    ThreadLocalObjectsAnalysis tlo = null;
					    SynchronizedRegionFinder ta = new SynchronizedRegionFinder(eug, body, optionPrintDebug, optionOpenNesting, tlo);
					    NormalUnitPrinter nup = new NormalUnitPrinter(body);
					    nup.setIndent("  ");
					    Chain units = body.getUnits();
					    Unit lastUnit = (Unit) units.getLast();
					    FlowSet fs = (FlowSet) ta.getFlowBefore(lastUnit);
					    List fList = fs.toList();
					    for(int i = 0; i < fList.size(); i++) {
						CriticalSection tn = ((SynchronizedRegionFlowPair) fList.get(i)).tn;
						G.v().out.println("Found critical section in " + tn.method.getName());
						Unit b = tn.beginning;
						for (Unit u : tn.units) {
						    System.out.println("  unit " + u);
						    u.toString(nup);
						}
					    }
					}
				    });
	PackManager.v().getPack("wjtp").add(t);
	soot.Main.main(args);
    }
}
